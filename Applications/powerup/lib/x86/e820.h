//*****************************************************************************
//*****************************************************************************
//*                                                                           *
//*  X86 - E820                                                               *
//*                                                                           *
//*****************************************************************************
//*****************************************************************************
#ifndef __X86_E820_H
#define __X86_E820_H

#include "typedef.h"

//=============================================================================
//  E820 common
//=============================================================================
#define E820_ITEM_MAX		(1024)
#define E820_ITEM_SZ		(20)	// each item size = 20 bytes

//=============================================================================
//  E820 Type
//=============================================================================
#define E820_TYPE_UNKNOWN	0
#define E820_TYPE_RAM		1
#define E820_TYPE_RSVD		2
#define E820_TYPE_ACPI		3
#define E820_TYPE_NVS		4
#define E820_TYPE_UNUSE		5
#define E820_TYPE_DISABLE	6

//=============================================================================
//  error code
//=============================================================================
#define E820_OK				0
#define E820_ERR_MALLOC		1


#pragma pack(1)
//=============================================================================
//  typedef : e820_info_t
//=============================================================================
typedef struct _e820_info_t
{
	uint32_t	base_lsb;
	uint32_t	base_msb;
	uint32_t	len_lsb;
	uint32_t	len_msb;
	uint32_t	type;

	uint32_t	kbsz;

	struct _e820_info_t	*prev;
	struct _e820_info_t	*next;

} e820_info_t;

//=============================================================================
//  e820_t
//=============================================================================
typedef struct _e820_t
{
	e820_info_t		*item;
	uint32_t		num_item;
	uint32_t		kbsz;
	uint32_t		mbsz;
	uint32_t		tysz[8];	// total size of each type
	uint8_t			tynum[8];	// num of item of each type
	
} e820_t;

#pragma pack()

//=============================================================================
//  extern
//=============================================================================
extern e820_t	e820;

//=============================================================================
//  functions
//=============================================================================
char *e820_get_type_name(uint8_t id);

uint8_t e820_init(void);
void	e820_exit(void);

#endif
