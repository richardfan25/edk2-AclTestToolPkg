#ifndef _PCHI2CDRIVER_H__
#define _PCHI2CDRIVER_H__




#include <Protocol/I2cMaster.h>



typedef struct _I2C_CONFIGURATION
{
	UINT32 RxFifoDepth;
	UINT32 TxFifoDepth;
}I2C_CONFIGURATION;

typedef struct _I2CMASTER_PRIVATE
{
	EFI_I2C_MASTER_PROTOCOL I2cController;
	EFI_DEVICE_PATH_PROTOCOL *DevPath;
	EFI_HANDLE Handle;	///< Handle
	UINT32 I2cSdpAddress;
	UINT8 I2cBusId;
	UINT8 Mp2;
	UINTN ClockFrequency;
	UINT8 *WriteData;
	UINT32 WriteCount;
	UINT8 *ReadData;
	UINT32 ReadCount;
	UINT32 TransferCount;
	I2C_CONFIGURATION I2cConfiguration;
}I2CMASTER_PRIVATE;

/// Private I2C Master Data Block Structure
typedef struct _I2C_MASTER_PRIVATE
{
	I2CMASTER_PRIVATE I2cMaster[8];		///< I2c0~7 Data Block
}I2C_MASTER_PRIVATE;

typedef struct
{
	MEMMAP_DEVICE_PATH I2cMemMapDevPath;
	CONTROLLER_DEVICE_PATH I2cBus;
	EFI_DEVICE_PATH_PROTOCOL End;
}I2C_DEVICE_PATH; 



enum I2C_Speed
{
	I2C_SPEED_STANDARD	= 100000,
	I2C_SPEED_FAST		= 400000,
	I2C_SPEED_FAST_PLUS	= 1000000,
	I2C_SPEED_HIGH		= 3400000,
	I2C_SPEED_FAST_ULTRA	= 5000000,
};



EFI_STATUS EFIAPI SetBusFrequency(IN CONST EFI_I2C_MASTER_PROTOCOL *This, IN UINTN *speed);
EFI_STATUS EFIAPI Reset(IN CONST EFI_I2C_MASTER_PROTOCOL *This);
EFI_STATUS EFIAPI StartRequest(IN CONST EFI_I2C_MASTER_PROTOCOL *This, IN UINTN SlaveAddress, IN EFI_I2C_REQUEST_PACKET *RequestPacket, IN EFI_EVENT Event OPTIONAL, OUT EFI_STATUS *I2cStatus OPTIONAL);
EFI_STATUS I2cInit(IN OUT I2CMASTER_PRIVATE *Private);
EFI_STATUS I2cWriteRead(IN OUT I2CMASTER_PRIVATE *Private);
EFI_STATUS I2cAccess(IN I2CMASTER_PRIVATE *Private, IN UINTN SlaveAddress, IN OUT EFI_I2C_REQUEST_PACKET *RequestPacket);
EFI_STATUS I2cDwWaitI2cEnable(IN UINT32 Base, IN UINT32 I2cEnBit);
EFI_STATUS EFIAPI PCHI2cMasterDxeInit (IN EFI_HANDLE ImageHandle, IN EFI_SYSTEM_TABLE *SystemTable);



extern EFI_BOOT_SERVICES *gBS;
extern EFI_SYSTEM_TABLE *gST;


#endif
